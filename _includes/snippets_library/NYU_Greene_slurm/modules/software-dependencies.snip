To demonstrate, let's use `module list`. `module list` shows all loaded
software modules.

```
{{ site.host_prompt }} module list
```
{: .language-bash}
```
No modules loaded
```
{: .output}

```
{{ site.host_prompt }} module load lammps/openmpi/intel/20231214
{{ site.host_prompt }} module list
```
{: .language-bash}

```

Currently Loaded Modules:
  1) szip/intel/2.1.1               5) gsl/intel/2.6              9) python/intel/3.8.6
  2) hdf5/intel/1.12.0              6) openmpi/intel/4.0.5       10) boost/intel/1.74.0
  3) netcdf-c/intel/4.7.4           7) fftw/openmpi/intel/3.3.9  11) plumed/openmpi/intel/2.8.3
  4) pnetcdf/openmpi/intel/1.12.1   8) intel/19.1.2              12) lammps/openmpi/intel/20231214


```
{: .output}

So in this case, loading the `lammps` module (a molecular dynamics
software package), also loaded 11 other modules as well. Let's try
unloading the `lammps` package.

```
{{ site.host_prompt }} module unload lammps/openmpi/intel/20231214
{{ site.host_prompt }} module list
```
{: .language-bash}

```
No modules loaded
```
{: .output}

So using `module unload` "un-loads" a module along with its dependencies. If we
wanted to unload everything at once, we could run `module purge` (unloads
everything).

```
{{ site.host_prompt }} module purge
```
{: .language-bash}
```
No modules loaded
```
{: .output}
